@page "/"

@using Common.Classes;
@using Common.Interfaces;
@using Common.Enum;
@using Microsoft.Extensions.Configuration;
@using UI.Models;
@using System.Globalization;

@inject IDayEventService dayEventService;
@inject IDataAccess _data
@inject IConfiguration _config
@*https://github.com/TheAmazingOnes/HitachiPowerGrids.git*@

<div class="display-4 heading-font mt-5 mb-1 text-allign text-center">Daglig styrning</div>

<div class="d-flex flex-row">
    <div class="d-flex flex-column justify-content-center align-items-center text-center">
        <nav class="d-flex flex-row max-width align-items-center justify-content-center p-1 mx-auto bg-white">
            <img src="images/SQLMO whole.png">
            <div class="d-none d-md-flex"></div>
        </nav>
    </div>

    <div class="d-flex flex-row justify-content-center align-items-center text-center ml-5">
        <div class="d-flex flex-column justify-content-center align-items-center text-center p-1 mx-auto bg-white">
            <div class="display-6 heading-font mt-5 mb-1 thicker">STOP! Take 5</div>
            <img src="images/StopTakeFive.PNG">
            <div class="d-none d-md-flex"></div>
        </div>
        <div class="d-flex flex-column justify-content-center text-center mt-25 ml-3">
            <div class="display-8 heading-font mt-1 thick">Stanna upp</div>
            <div class="display-8 heading-font mt-2 thick">Tänk efter</div>
            <div class="display-8 heading-font mt-2 thick">Identifiera risker</div>
            <div class="display-8 heading-font mt-2 thick">Planera arbetet</div>
            <div class="display-8 heading-font mt-2 thick">Jobba säkert och med hög kvalitet</div>
        </div>
    </div>
</div>

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Välj datum</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-5">
                            <label>Från Datum : </label>
                        </div>
                        <div class="col-md-6">
                            <input type="date" @bind-value="@dayEvent.FromDate" style="width:100%;" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Till Datum : </label>
                    </div>
                    <div class="col-md-6">
                        <input type="date" @bind-value="@dayEvent.ToDate" style="width: 100%;" />
                    </div>
                </div>
                <div class="panel-heading modalHeading">SQLMO</div>
                <div class="row">
                    <div class="col-md-5">
                        <label style="margin-top: 10px;">Säkerhet : </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%; margin-top: 10px;" @bind="@dayEvent.Safety">
                            @foreach (var type in GetSafetyOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Kvalitet : </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%;" @bind="@dayEvent.Quality">
                            @foreach (var type in GetQualityOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Leverans : </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%;" @bind="@dayEvent.Delivery">
                            @foreach (var type in GetDeliveryOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Material : </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%;" @bind="@dayEvent.Material">
                            @foreach (var type in GetMaterialOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Ordning & reda: </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%;" @bind="@dayEvent.Tidy">
                            @foreach (var type in GetTidyOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="panel-heading modalHeading">Stop! Take 5</div>
                <div class="row">
                    <div class="col-md-5">
                        <label>Stop! Take 5 : </label>
                    </div>
                    <div class="col-md-6">
                        <select style="height: 31px; width: 100%;" @bind="@dayEvent.ActionsOfTheDay">
                            @foreach (var type in GetActionsOfTheDayTypes())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label style="margin-top: 10px;">Notering : </label>
                    </div>
                    <div class="col-md-6">
                        <input type="text" style="height: 31px; width: 100%; margin-top: 10px;" @bind-value="@dayEvent.Note" placeholder="Skriv här..." />
                    </div>
                </div>
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6"></div>
                    <div class="col-md-10" style="text-align:right">
                        <button class="btn save-button save-button:hover flex mx-auto" @onclick="SaveNote" style="margin:15px 5px 15px 5px;">Spara</button>
                        <button class="btn close-button close-button:hover flex mx-auto" @onclick="CloseModal" style="margin: 15px 5px 15px 5px;">Stäng</button>
                        @if (dayEvent.DayEventId > 0)
                        {
                            <button class="btn delete-button:hover delete-button flex mx-auto" @onclick="DeleteDayEvent" style="margin: 15px 5px 15px 5px;">Ta bort</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="tableCalendar table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;

                    <td @onclick="@(() => OpenModal(wIndex, dIndex))">
                        @weeks[weekIndex].Dates[dayIndex].DateValue
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].Safety == "OK")
                        {
                            <label style="color:black; font-weight: bold">Säkerhet:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Safety == "Tillbud")
                        {
                            <label style="color:black; font-weight: bold">Säkerhet:&nbsp</label><label style="color:blue; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Safety == "Olycka")
                        {
                            <label style="color:black; font-weight: bold">Säkerhet:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                        }
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].Quality == "OK")
                        {
                            <label style="color:black; font-weight: bold">Kvalitet:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Quality</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Quality == "Kvalitetsproblem")
                        {
                            <label style="color:black; font-weight: bold">Kvalitet:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Quality</label>
                        }
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].Delivery == "OK")
                        {
                            <label style="color:black; font-weight: bold">Leverans:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Delivery</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Delivery == "Leveransproblem")
                        {
                            <label style="color:black; font-weight: bold">Leverans:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Delivery</label>
                        }
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].Material == "OK")
                        {
                            <label style="color:black; font-weight: bold">Material:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Material</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Material == "Materialproblem")
                        {
                            <label style="color:black; font-weight: bold">Material:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Material</label>
                        }
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].Tidy == "OK")
                        {
                            <label style="color:black; font-weight: bold">Ordning & reda:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Tidy</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].Tidy == "Åtgärd_krävs")
                        {
                            <label style="color:black; font-weight: bold">Ordning & reda:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Tidy</label>
                        }
                        <br /><br />
                        @if (weeks[weekIndex].Dates[dayIndex].ActionsOfTheDay == "Signerad")
                        {
                            <label style="color:black; font-weight: bold">Stop! Take Five:&nbsp</label><label style="color:limegreen; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].ActionsOfTheDay</label>
                        }
                        else if (weeks[weekIndex].Dates[dayIndex].ActionsOfTheDay == "Åtgärd_krävs")
                        {
                            <label style="color:black; font-weight: bold">Stop! Take Five:&nbsp</label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].ActionsOfTheDay</label>
                        }
                        <br /><br />
                        <label style="color:black; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Note</label>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="mt-5"></div>
<h4>Handlingsplan</h4>
@if (error != string.Empty)
{
    <div class="row">
        <div class="col-5 alert alert-danger" role="alert">
            <strong>Error</strong> @error
        </div>
    </div>
}

<div class="row">
    <div class="col-10">
        <table class="table table-hover mb-5" style="border:1px solid">
            <thead class="thead-light">
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Beskrivning</th>
                    <th scope="col">Kategori</th>
                    <th scope="col">Ansvarig</th>
                    <th scope="col">Projekt</th>
                    <th scope="col">Status</th>
                    <th scope="col">Datum</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row"></th>
                    <td><input type="text" style="height:31px;" placeholder="Beskrivning" @bind="description" /></td>
                    <td><input type="text" style="height:31px;" placeholder="Kategori" @bind="category" /></td>
                    <td><input type="text" style="height:31px;" placeholder="Ansvarig" @bind="accountable" /></td>
                    <td><input type="text" style="height:31px;" placeholder="Projekt" @bind="project" /></td>
                    <td>
                        <select style="height:31px;" @bind="@selectedStatus">
                            @foreach (var type in GetActionStatuses())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </td>
                    <td><input type="date" style="height:31px;" placeholder="Datum" @bind="actionDate" /></td>
                    <td><button class="btn btn-success btn-sm" @onclick="SaveAction">Skapa</button></td>
                </tr>
                @*Skriver ut varje handlingspunkt som vi skapat*@
                @foreach (var p in pointsOfAction)
                {
                    <tr>
                        <th scope="row"><input type="checkbox" id="checkBox1" @onclick="() => ChangeCheckboxStatus(p.PointOfActionId)" /></th>
                        <th>@p.Description</th>
                        <th>@p.Category</th>
                        <th>@p.Accountable</th>
                        <th>@p.Project</th>
                        <th>@p.Status</th>
                        <th>@p.ActionDate.ToShortDateString()</th>
                        <th></th>
                    </tr>
                }
            </tbody>
            <tr class="thead-light">
                <th scope="col"></th>
                <th scope="col"><button class="btn btn-info btn-sm" @onclick="UpdateActionStatusToStarted">Påbörja</button></th>
                <th scope="col"><button class="btn btn-primary btn-sm" @onclick="UpdateActionStatusToEscalated">Eskalera</button></th>
                <th scope="col"><button class="btn btn-secondary btn-sm" @onclick="FileAction">Arkivera</button></th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"><button class="btn btn-danger btn-sm" @onclick="DeleteAction">Radera</button></th>
            </tr>
        </table>
    </div>
</div>

@code{

    #region Variabler Kalender
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<Week> weeks = new List<Week>();


    DateTime startDate = new DateTime(DateTime.Now.Year, 10, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;
    #endregion

    #region Variabler Handlingsplan
    string error = string.Empty;
    string description = string.Empty;
    string accountable = string.Empty;
    string category = default;
    string project = string.Empty;
    string selectedStatus = "Skapad";
    DateTime actionDate = DateTime.Now;
    IEnumerable<IPointOfAction> actionpoints;
    #endregion

    #region Variabler DataAccess
    List<PointsOfActionModel> pointsOfAction;
    #endregion

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();

        GetPointsOfAction();
        InitCheckboxStatus();
    }

    //Kalender
    DayEvent dayEvent = new DayEvent()
    {
        FromDate = DateTime.Now,
        ToDate = DateTime.Now,
        Note = ""
    };


    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalendarBody()
    {
        weeks = new List<Week>();
        var dayEvents = dayEventService.GetEvents(startDate, endDate);

        int flag = 0;
        Week week = new Week();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            @*dates.Add(new DayEvent()
                {
                    DateValue = dt.ToString("dd-MMM-yyyy"),
                    DayName = dt.ToString("dddd")
                });*@

            var currentObject = dayEvents.Find(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

            dates.Add(new DayEvent()
            {
                DayEventId = currentObject == null ? 0 : currentObject.DayEventId,
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd"),
                Note = currentObject == null ? "" : currentObject.Note,
                Safety = currentObject == null ? "" : currentObject.Safety,
                Quality = currentObject == null ? "" : currentObject.Quality,
                Delivery = currentObject == null ? "" : currentObject.Delivery,
                Material = currentObject == null ? "" : currentObject.Material,
                Tidy = currentObject == null ? "" : currentObject.Tidy,
                ActionsOfTheDay = currentObject == null ? "" : currentObject.ActionsOfTheDay

            });

            if (flag == 7)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }

            if (countdays == totalDays)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }

            countdays++;
        }
    }

    private void CloseModal()
    {
        ResetModal();
    }

    private void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;

        var dayEventObj = dayEventService.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
        dayEvent = dayEventObj;

        displayModal = true;
    }

    private void SaveNote()
    {
        dayEvent = dayEventService.SaveOrUpdate(dayEvent);
        if (dayEvent.DayEventId > 0)
        {
            weeks[selectedWeekIndex].Dates[selectedDayIndex].DayEventId = dayEvent.DayEventId;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Note = dayEvent.Note;

            weeks[selectedWeekIndex].Dates[selectedDayIndex].Safety = dayEvent.Safety;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Quality = dayEvent.Quality;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Delivery = dayEvent.Delivery;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Material = dayEvent.Material;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Tidy = dayEvent.Tidy;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].ActionsOfTheDay = dayEvent.ActionsOfTheDay;

            ResetModal();
        }
    }

    private void DeleteDayEvent()
    {
        dayEventService.Delete(dayEvent.DayEventId);
        ResetModal();

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    private void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;
    }

    //Dropdown för Set Note
    public List<string> GetSafetyOptions()
    {
        return Enum.GetNames(typeof(SafetyOptions)).ToList();
    }

    public List<string> GetQualityOptions()
    {
        return Enum.GetNames(typeof(QualityOptions)).ToList();
    }

    public List<string> GetDeliveryOptions()
    {
        return Enum.GetNames(typeof(DeliveryOptions)).ToList();
    }

    public List<string> GetMaterialOptions()
    {
        return Enum.GetNames(typeof(MaterialOptions)).ToList();
    }

    public List<string> GetTidyOptions()
    {
        return Enum.GetNames(typeof(TidyOptions)).ToList();
    }

    public List<string> GetActionsOfTheDayTypes()
    {
        return Enum.GetNames(typeof(ActionsOfTheDayTypes)).ToList();
    }

    //Handlingsplan
    public List<string> GetActionStatuses()
    {
        return Enum.GetNames(typeof(ActionPointStatuses)).ToList();
    }

    private void GetPointsOfAction()
    {
        string sql = "select * from PointsOfAction where Status != 'Arkiverad'";

        pointsOfAction = _data.GetPointsOfAction<PointsOfActionModel, dynamic>(sql, new { }, _config.GetConnectionString("DagligStyrningDB"));
    }

    private void SaveAction()
    {
        string sql = "insert into pointsOfAction (Description, Category, Accountable, Project, Status, ActionDate) values (@Description, @Category, @Accountable, @Project, @Status, @ActionDate)";

        _data.SavePointOfAction(sql, new { Description = @description, Category = @category, Accountable = @accountable, Project = @project, Status = @selectedStatus, ActionDate = DateTime.Now }, _config.GetConnectionString("DagligStyrningDB"));

        GetPointsOfAction();
        InitCheckboxStatus();

        description = string.Empty;
        accountable = string.Empty;
        category = default;
        project = string.Empty;
        selectedStatus = default;
        actionDate = DateTime.Now;
    }

    void UpdateActionStatusToStarted()
    {
        foreach (KeyValuePair<int, bool> valuePair in checkboxStatus)
        {
            int dbId;
            if (valuePair.Value == true)
            {
                try
                {
                    string dbIdString = valuePair.Key.ToString();
                    string sql = "update pointsOfAction set Status = @Status where PointOfActionId = " + dbIdString;

                    _data.SavePointOfAction(sql, new { Status = "Påbörjad" }, _config.GetConnectionString("DagligStyrningDB"));

                    GetPointsOfAction();
                    InitCheckboxStatus();
                }
                catch (Exception ex)
                {
                    error = ex.Message;
                }
            }
        }
    }

    void UpdateActionStatusToEscalated()
    {
        foreach (KeyValuePair<int, bool> valuePair in checkboxStatus)
        {
            if (valuePair.Value == true)
            {
                try
                {
                    string dbIdString = valuePair.Key.ToString();
                    string sql = "update pointsOfAction set Status = @Status where PointOfActionId = " + dbIdString;

                    _data.SavePointOfAction(sql, new { Status = "Eskalerad" }, _config.GetConnectionString("DagligStyrningDB"));

                    GetPointsOfAction();
                    InitCheckboxStatus();
                }
                catch (Exception ex)
                {
                    error = ex.Message;
                }
            }
        }
    }

    void FileAction()
    {
        foreach (KeyValuePair<int, bool> valuePair in checkboxStatus)
        {
            if (valuePair.Value == true)
            {
                try
                {
                    string dbIdString = valuePair.Key.ToString();
                    string sql = "update pointsOfAction set Status = @Status where PointOfActionId = " + dbIdString;

                    _data.SavePointOfAction(sql, new { Status = "Arkiverad" }, _config.GetConnectionString("DagligStyrningDB"));

                    GetPointsOfAction();
                    InitCheckboxStatus();
                }
                catch (Exception ex)
                {
                    error = ex.Message;
                }
            }
        }
    }

    void DeleteAction()
    {
        foreach (KeyValuePair<int, bool> valuePair in checkboxStatus)
        {
            if (valuePair.Value == true)
            {
                try
                {
                    string dbIdString = valuePair.Key.ToString();
                    string sql = "delete from pointsOfAction where PointOfActionId = @PointOfActionId";

                    _data.SavePointOfAction(sql, new { PointOfActionId = dbIdString }, _config.GetConnectionString("DagligStyrningDB"));

                    GetPointsOfAction();
                    InitCheckboxStatus();
                }
                catch (Exception ex)
                {
                    error = ex.Message;
                }
            }
        }
    }

    //Checkbox
    Dictionary<int, bool> checkboxStatus = new Dictionary<int, bool>();

    public void InitCheckboxStatus()
    {
        checkboxStatus = new Dictionary<int, bool>();
        foreach (var p in pointsOfAction)
        {
            checkboxStatus.Add(p.PointOfActionId, false);
        }
    }

    public void ChangeCheckboxStatus(int s)
    {
        if (checkboxStatus[s] == false)
        {
            checkboxStatus[s] = true;
        }
        else
        {
            checkboxStatus[s] = false;
        }
    }
}